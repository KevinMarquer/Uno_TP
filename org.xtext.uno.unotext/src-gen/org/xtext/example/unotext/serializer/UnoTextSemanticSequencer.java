/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.unotext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.unotext.services.UnoTextGrammarAccess;
import org.xtext.example.unotext.unoText.CarteIdentique;
import org.xtext.example.unotext.unoText.CumulAjout;
import org.xtext.example.unotext.unoText.Uno;
import org.xtext.example.unotext.unoText.UnoOlypique;
import org.xtext.example.unotext.unoText.UnoTextPackage;
import org.xtext.example.unotext.unoText.UnoWizz;
import org.xtext.example.unotext.unoText.Uno_Classic;

@SuppressWarnings("all")
public class UnoTextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private UnoTextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UnoTextPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UnoTextPackage.CARTE_IDENTIQUE:
				sequence_CarteIdentique(context, (CarteIdentique) semanticObject); 
				return; 
			case UnoTextPackage.CUMUL_AJOUT:
				sequence_CumulAjout(context, (CumulAjout) semanticObject); 
				return; 
			case UnoTextPackage.UNO:
				sequence_Uno(context, (Uno) semanticObject); 
				return; 
			case UnoTextPackage.UNO_OLYPIQUE:
				sequence_UnoOlypique(context, (UnoOlypique) semanticObject); 
				return; 
			case UnoTextPackage.UNO_WIZZ:
				sequence_UnoWizz(context, (UnoWizz) semanticObject); 
				return; 
			case UnoTextPackage.UNO_CLASSIC:
				sequence_Uno_Classic(context, (Uno_Classic) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CarteIdentique returns CarteIdentique
	 *
	 * Constraint:
	 *     AvecCouleur?='AvecCouleur'
	 */
	protected void sequence_CarteIdentique(ISerializationContext context, CarteIdentique semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UnoTextPackage.Literals.CARTE_IDENTIQUE__AVEC_COULEUR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnoTextPackage.Literals.CARTE_IDENTIQUE__AVEC_COULEUR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCarteIdentiqueAccess().getAvecCouleurAvecCouleurKeyword_1_0(), semanticObject.isAvecCouleur());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CumulAjout returns CumulAjout
	 *
	 * Constraint:
	 *     ((plus2?='PLus2'+ plus4?='PLus4') | plus4?='PLus4')?
	 */
	protected void sequence_CumulAjout(ISerializationContext context, CumulAjout semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Uno_Rule returns UnoOlypique
	 *     UnoOlypique returns UnoOlypique
	 *
	 * Constraint:
	 *     (
	 *         TribunalPopulaire='TribunalPopulaire'+ 
	 *         DistributionAleatoire='DistributionAleatoire'+ 
	 *         SensDefini='SensDefini'+ 
	 *         ChangementDonneur='ChangementDonneur'+ 
	 *         VueDesCartesApres1erPose='VueDesCartesApres1erPose'+ 
	 *         DonneurPremierose='DonneurPremierose'+ 
	 *         JeuRapide='JeuRapide'+ 
	 *         Interception='Interception'+ 
	 *         DeuxCartesIdentiques='DeuxCartesIdentiques'+ 
	 *         DecisionCarte='DecisionCarte'+ 
	 *         Surenchere='Surenchere'+ 
	 *         cartezero?='Carte0'* 
	 *         CarteSept?='Carte7'* 
	 *         Carte2='Carte2'+ 
	 *         ValeurCarte='ValeurCarte'
	 *     )
	 */
	protected void sequence_UnoOlypique(ISerializationContext context, UnoOlypique semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Uno_Rule returns UnoWizz
	 *     UnoWizz returns UnoWizz
	 *
	 * Constraint:
	 *     (presquUno='presquUno,'+ chiffreMoins='chiffreMoins,'+ couleurMoins='couleurMoins,'+ carteRouge='carteRouge'+)
	 */
	protected void sequence_UnoWizz(ISerializationContext context, UnoWizz semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Uno_Rule returns Uno_Classic
	 *     Uno_Classic returns Uno_Classic
	 *
	 * Constraint:
	 *     (
	 *         unoChallenge?='UnoChallenge'* 
	 *         carte0_7?='Carte0_7'* 
	 *         carteIdentique?=CarteIdentique* 
	 *         cumulAjout?=CumulAjout+ 
	 *         suite?=Suite* 
	 *         pioche?='Pioche'* 
	 *         more4?='More4'* 
	 *         tempsLimite?='tempsLimite'* 
	 *         mauvaiseCarte?='mauvaiseCarte'* 
	 *         equipe?='equipe'* 
	 *         carteVisibles?='CarteVisibles'+ 
	 *         finManche?=FinManche* 
	 *         threeHands?='ThreeHands'* 
	 *         threePiles?='ThreePiles'* 
	 *         specialCard?=SpecialCard* 
	 *         gameOver=GameOver
	 *     )
	 */
	protected void sequence_Uno_Classic(ISerializationContext context, Uno_Classic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Uno returns Uno
	 *
	 * Constraint:
	 *     (uno+=Uno_Rule nombreJoueur+=NombreJoueurs)
	 */
	protected void sequence_Uno(ISerializationContext context, Uno semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
